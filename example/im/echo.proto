// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

syntax="proto2";
package example;

import "google/protobuf/timestamp.proto";

option cc_generic_services = true;

message EchoRequest {
      required string message = 1;
};

message EchoResponse {
      required string message = 1;
};

message ResponseCode {
      required int32 retcode = 1;
      optional string error_message = 2;
};

enum MessageType {
      SingleMessage = 1;
      GroupMessage = 2;
};

enum RetCode {
      RET_SUCC = 0;
      RET_FAIL = 1;
      RET_EMPTY = 2;
};

message Message {
      required MessageType message_type = 1;
      required google.protobuf.Timestamp send_time = 2;
      required string sender = 3;
      required string receiver = 4;
      required string content = 5;
};

message NewMessageRequest {
      required Message new_message = 1;
};

message NewMessageResponse {
      required ResponseCode rc = 1;
};

message GetNewMessageRequest {
      required string username = 1;
      required int32 timeout = 2;  // 最大超时时间
};

message GetNewMessageResponse {
      required ResponseCode rc = 1;
      repeated Message messages = 2;
};

message InnerNewMessageRequest {
      required Message new_message = 1;
};

message InnerNewMessageResponse {
      required ResponseCode rc = 1;
};

service EchoService {
      rpc Echo(EchoRequest) returns (EchoResponse);
};

service IMService {
      rpc MessageHandle(NewMessageRequest) returns (NewMessageResponse);
      rpc GetNewMessageHandle(GetNewMessageRequest) returns (GetNewMessageResponse);
      rpc InnerMessageHandle(InnerNewMessageRequest) returns (InnerNewMessageResponse);
};
